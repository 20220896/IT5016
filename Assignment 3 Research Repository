# Code that I used or practiced with in my assignment

# Quotation Manipulation
# Demonstrates string methods
# Code was found online as part or course practice material
# quote from IBM Chairman, Thomas Watson, in 1943

quote = "I think there is a world market for maybe five computers."
print("Original quote:")
print(quote)
print("\nIn uppercase:")
print(quote.upper())
print("\nIn lowercase:")
print(quote.lower())
print("\nAs a title:")
print(quote.title())
print("\nWith a minor replacement:")
print(quote.replace("five", "millions of"))
print("\nOriginal quote is still:")
print(quote)
input("\n\nPress the enter key to exit.")
    
# Incremental Steps
# Method allows for user to input additional details 
# The code below was fundamental in allowing me experiemnt with different inputs
# Basic function that was applied in my assignment 

staff_number = input('Enter staff id: \n')
    user_name = input('Enter your name: \n')
    contact_email = input('Enter the contact email: \n')
    description = input('Enter a brief description of the issue: \n')
    response_desc = 'Not Yet Responded'
    ticket_status = 'Open'

# If statements return only True or False
# When the condition is met, an action is taken, when the condition is not met, action is skipped and presents next code block
# The code was in the course practice materials 
# I found this code useful as it allowed me to create different program reactions to different variable inputs
# This was used in the assignment when creating tickets 

print ("Kia Ora, this is a parking meter")
park_time = 4
print ("park_time time is ", park_time, " hours.")
 
rate = 4
cost = 0
if park_time > 3:
    cost = rate *3
    # drop the rate by $2
    rate -= 2
    # get the remainder of the parking time
    park_time -= 3
    # add to the current cost
    cost += rate * park_time
    print("The cost of the parking is $", cost)
else:
    cost = rate * park_time
    print ("The cost of the parking is $", cost)
    
# Simple functions were great to learn as it would help save time writing the same codes again and again
# Code was found as part of course materials
# Was useful in the assisgnment when creating tickets 

def show_hello():
    print("Hello there, this is my very first function!!!\n\n")
 
print("Testing my first user defined function...\n\n")
    
# Code I found interesting or want to explore 

# While Loops are continuous actions that stop when a condition is met
# Code was found as part of learning examples from the course materials
# This function allows the interpreter to keep running with changes when responding to different inputs 

is_running = True
 
while is_running:
    answer = input("What is the meaning of life?...\n")
    if answer == "42":
        print("Correct! Well done!\n")
        # correct answer, so exit loop - reset is_running
        is_running = False
    else:
        print("Sorry that is the wrong answer.... "
              "Try again!\n")
 
x = input("Press any key to exit.")

# For loops used are used to Iterate through a given number of times, and iterate through lists
# Interesting to see the difference between While loops and For loops
# Prints the text the number of times you indicate 

user_input = int(input("Please enter the number of times "
                       "that you wish to see the message."))
 
for i in range(user_input):
    print("hello world....", i)

# Draw a Pie Chart
# This code was found online and it stood out to me as the output was a graphic image rather than text
# The output is a pie chart and it will allow for furture experiments with numbers, percentages and colours

import matplotlib.pyplot as plt
Partition = 'Holidays', 'Eating_Out', 'Shopping', 'Groceries'
sizes = [250, 100, 300, 200]
fig1, ax1 = plt.subplots()
ax1.pie(sizes, labels=Partition, autopct='%1.1f%%', shadow=True, startangle=90)         
ax1.axis('equal')
plt.show()

# Alert Box with Python
# Code was found online as part of further learning material 
# Would be useful function to have when the interpreter cannot process correct input from user

num=int(input("Enter a value to divide 100"))
if num == 0:
    pyautogui.alert(" Alert!!! 100 cannot be divided by 0")
else:
    print(f'The value is {100/num}')    
   
# Graphics with Python
# Code was found online as part of further practice material
# Ouput is a an animted graphic which was fun to see

import random
import turtle
colors = ['red','cyan','pink' ,'yellow', 'green','orange']
t = turtle.Turtle()
t.speed(10)
turtle.bgcolor("black")
length=100
angle =50
size=5
for i in range(length):
    color=random.choice(colors)
    t.pencolor(color)
    t.fillcolor(color)
    t.penup()
    t.forward(i+50)
    t.pendown()
    t.left(angle)
    t.begin_fill()
    t.circle(size)
    t.end_fill()
turtle.exitonclick()
turtle.bgcolor("black")   

# Code that I found difficult to understand

# This code utlises the [] expression
# To understand how to use indexes and nested indexes to populate lists

my_list = ['p','r','o','b','e']
# Output: p
print(my_list[0])
# Output: o
print(my_list[2])
# Output: e
print(my_list[4])
# Error! Only integer can be used for indexing
# my_list[4.0]
# Nested List
n_list = ["Happy", [2,0,1,6]]
# Nested indexing
# Output: a
print(n_list[0][1])
# Output: 5
print(n_list[1][3])
# using negative indexing
# Output: e
print(my_list[-1])
# Output: p
print(my_list[-5])

# Tuples are immutable
# To further understand how Tuples can add an extra layer of saftey to code

bank_accounts = (("Joe", 33, "234 Great South Road", "022629107"),
                 ("Tama", 6000),
                 ("Suzanne", 21025, "45 Green Lane"),
                 ("Anihera", -75))
 
print("The number of bank accounts is ", len(bank_accounts))
 
# showing names and balances
for i in bank_accounts:
    print("\nThe name is ", i[0], " and the balance is $", i[1])
 
# showing only names with addresses
for i in bank_accounts:
    if len(i)>2:
        print("\nThe name is ", i[0], " and the address is ", i[2])
        
# I am interested in learning the dictionary method 
# I did not apply this code in my practice, however it seems like a efficient way up to speed up coding

my_dict = {'name':'Deadpool', 'designation': 'developer'}
print(my_dict)
Output: { 'designation': developer, 'name': Deadpool}

my_dict['designation'] = 'sr developer'

#Output: {'designation': sr developer, 'name': Deadpool}
print(my_dict)

my_dict['address'] = 'New York'  
print(my_dict)
